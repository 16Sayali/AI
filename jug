
max1=int(input("Enter jug 1 "))
max2=int(input("Enter jug 2 "))
fill=int(input("Enter fill value : "))
def pour(jug1,jug2):
    
    print("%d\t%d" % (jug1,jug2))
    if jug2 == fill:
        return
    elif jug2 == max2: 
        pour(0,jug1)
    elif jug1 !=0 and jug2 == 0:
        pour(0,jug1)
    elif jug1 == fill:
        pour(jug1,0)
    elif jug1<max1:
        pour(max1,jug2)
    elif jug1<(max2-jug2):
        pour(0,(jug1+jug2))
    else :
        pour(jug1-(max2-jug2),(max2-jug2)+jug2)
print("JUG1\tJUG2") 
pour(0,0)
-------------------------------------------------------------------

tsp 
import numpy as np
import sys

def nn(curr,unvisited,m):
    nearest=sys.maxsize
    neighbor=None
    for city in unvisited:
        if m[curr][city]<nearest:
            nearest=m[curr][city]
            neighbor=city
    return neighbor,nearest

def tsp_nn(m):
    n=len(m)
    tour=[0]*5
    unvisited=set(range(1,n))
    curr_city=0
    for i in range(1,n):
        next_city,dist=nn(curr_city,unvisited,m)
        tour[i]=next_city
        curr_city=next_city
        unvisited.remove(next_city)
        tour[n-4]=0
        cost=sum(m[tour[i]] [tour[i+1]] for i in range(n-1))
        cost+=m[tour[n-1]] [tour[0]]
    return tour,cost

a=int(input("enter row matrix"))
b=int(input("enter col matrix"))
print(" ")
#map(int, ...) will call int on each word
#split that input int into list
e=list(map(int,input().split())) #will split that input into a list of "words";
m=np.array(e).reshape(a,b)
print("Matrix is ",m)

tour,cost=tsp_nn(m)
print("Tour ",tour)
print("cost",cost)
